BikeData <- read.csv("C:/Users/Shippuden/Cursos/Curso-Foundations of Data Analysis/BikeData.csv")
View(BikeData)
View(BikeData)
View(BikeData)
BikeData[7,3]
BikeData[3,7]
BikeData[7,2]
BikeData$cyc_freq
BikeData$cyc_freq[,1:10]
BikeData$cyc_freq[1:10]
3.24/24
str(BikeDAta)
str(BikeData)
table(BikeData$student)
student <-BikeData[BikeData$student==1,]
student
table(student$cyc_freq)
distance <-student$distance
distance
mean(distance)
install.packages("UsingR")
install.packages("UsingR")
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(manipulate)
myHist<-function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
plot(galton$parent,galton$child,pch=19,col="blue")
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
options(xtable.type = 'html')
knit_hooks$set(inline = function(x) {
if(is.numeric(x)) {
round(x, getOption('digits'))
} else {
paste(as.character(x), collapse = ', ')
}
})
knit_hooks$set(plot = knitr:::hook_plot_html)
runif(1)
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
plot(galton$parent,galton$child,pch=19,col="blue")
myplot<-function(beta){
y<-galton$child-mean(galton$child)
x<-galton$parent-mean(galton$paren)
freqData<-as.data.frame(table(x,y))
name(freqData)<-c("child","parent","freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21,col="black",bg="ligtblue",
cex=0.15*freqData$freq,
xlab="parent",
ylab="child",
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse<-mean((y-beta*x)^2)
title(paste("beta=",beta,"mse=",round(mse,3)))
}
manipulate(myplot(beta),beta=slinder(0.8,1.2,step=0.02))
manipulate(myplot(beta),beta=slider(0.8,1.2,step=0.02))
plot(galton$parent,galton$child,pch=19,col="blue")
myplot<-function(beta){
y<-galton$child-mean(galton$child)
x<-galton$parent-mean(galton$paren)
freqData<-as.data.frame(table(x,y))
name(freqData)<-c("child","parent","freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21,col="black",bg="ligtblue",
cex=0.15*freqData$freq,
xlab="parent",
ylab="child",
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse<-mean((y-beta*x)^2)
title(paste("beta=",beta,"mse=",round(mse,3)))
}
manipulate(myplot(beta),beta=slider(0.8,1.2,step=0.02))
plot(galton$parent,galton$child,pch=19,col="blue")
myplot<-function(beta){
y<-galton$child-mean(galton$child)
x<-galton$parent-mean(galton$paren)
freqData<-as.data.frame(table(x,y))
names(freqData)<-c("child","parent","freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21,col="black",bg="ligtblue",
cex=0.15*freqData$freq,
xlab="parent",
ylab="child",
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse<-mean((y-beta*x)^2)
title(paste("beta=",beta,"mse=",round(mse,3)))
}
manipulate(myplot(beta),beta=slider(0.8,1.2,step=0.02))
manipulate(myplot(beta),beta=slider(0.8,1.2,step=0.02))
manipulate(myplot(beta),beta=slider(0.8,1.2,step=0.02))
myplot<-function(beta){
y<-galton$child-mean(galton$child)
x<-galton$parent-mean(galton$paren)
freqData<-as.data.frame(table(x,y))
names(freqData)<-c("child","parent","freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21,col="black",bg="lightblue",
cex=0.15*freqData$freq,
xlab="parent",
ylab="child",
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse<-mean((y-beta*x)^2)
title(paste("beta=",beta,"mse=",round(mse,3)))
}
manipulate(myplot(beta),beta=slider(0.8,1.2,step=0.02))
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
y<-galton$child-mean(galton$child)
x<-galton$parent-mean(galton$paren)
freqData<-as.data.frame(table(x,y))
freqData
names(freqData)<-c("child","parent","freq")
freqData<-as.data.frame(table(x,y))
freqData
names(freqData)<-c("child","parent","freq")
freqData
manipulate(myplot(beta),beta=slider(0,5,step=0.05))
manipulate(myplot(beta),beta=slider(0,1.5,step=0.02))
manipulate(myplot(beta),beta=slider(0.8,1.5,step=0.02))
lm(I(child-mean(child))~I(parent-mean(parent))-1,data=galton)
manipulate(myplot(beta),beta=slider(0.2,1.5,step=0.02))
y<-galton$child
x<-galton$parent
beta1<-cor(y,x)* sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
rbind(c(beta0,beta1),coef(lm(y~x)))
beta1<-cor(y,x)* sd(x)/sd(y)
beta0<-mean(x)-beta1*mean(y)
rbind(c(beta0,beta1),coef(lm(x~y)))
yn<-(y-mean(y))/sd(y)
xn<-(x-mean(x))/sd(x)
c(cor(y,x),cor(yn,xn),coef(lm(yn~xn))[2])
abline(mean(y)-mean(x)*cor(y,x)*sd(y)/sd(x),sd(y)/sd(x)*cor(y,x),lwd=3,col="red")
abline(mean(y)-mean(x)*sd(y)/sd(x)/cor(y,x),sd(y)cor(y,x)/sd(x),lwd=3,col="blue")
abline(mean(y)-mean(x)*sd(y)/sd(x)/cor(y,x),sd(y),cor(y,x)/sd(x),lwd=3,col="blue")
abline(mean(y)-mean(x)*sd(y)/sd(x),sd(y)/sd(x),lwd=2)points(mean(x),mean(y),cex=2,pch=19)
abline(mean(y)-mean(x)*sd(y)/sd(x),sd(y)/sd(x),lwd=2),points(mean(x),mean(y),cex=2,pch=19)
abline(mean(y)-mean(x)*sd(y)/sd(x),sd(y)/sd(x),lwd=2)
points(mean(x),mean(y),cex=2,pch=19)
abline(mean(y)-mean(x)*cor(y,x)*sd(y)/sd(x),sd(y)/sd(x)*cor(y,x),lwd=3,col="red")
abline(mean(y)-mean(x)*cor(y,x)*sd(y)/sd(x),sd(y)/sd(x)*cor(y,x),lwd=3,col="red")
abline(mean(y)-mean(x)*sd(y)/sd(x)/cor(y,x),sd(y),cor(y,x)/sd(x),lwd=3,col="blue")
abline(mean(y)-mean(x)*sd(y)/sd(x),sd(y)/sd(x),lwd=2)
points(mean(x),mean(y),cex=2,pch=19)
manipulate(myplot(beta),beta=slider(0.2,1.5,step=0.02))
abline(mean(y)-mean(x)*cor(y,x)*sd(y)/sd(x),sd(y)/sd(x)*cor(y,x),lwd=3,col="red")
abline(mean(y)-mean(x)*sd(y)/sd(x)/cor(y,x),sd(y),cor(y,x)/sd(x),lwd=3,col="blue")
abline(mean(y)-mean(x)*sd(y)/sd(x),sd(y)/sd(x),lwd=2)
points(mean(x),mean(y),cex=2,pch=19)
data(father.son)
y<-(father.son$sheight-mean(father.son$sheight))/sd(father.son$sheight)
x<-(father.son$fheight-mean(father.son$fheight))/sd(father.son$fheight)
rho<-cor(x,y)
MyPlot<-function(x,y){
plot(x,y,
xlab="Father'sheight,normalized",
ylab="Son'sheight,normalized",
xlim=c(-3,3),ylim=c(-3,3),
bg="lightblue",col="black",cex=1.1,pch=21,
frame=FALSE)
}
MyPlot(x,y)
abline(0,1)#iftherewereperfectcorrelation
abline(0,rho,lwd=2)#fatherpredictsson
abline(0,1/rho,lwd=2)#sonpredictsfather,sononverticalaxis
abline(h=0);abline(v=0)#referencelinesfornorelathionship
rho<-cor(x,y)
rho
MyPlot(x,y)
abline(0,1, col=1)                 # una correlacion perfecta
abline(0,rho,lwd=2, col=2)         # padre predice al hijo
abline(0,1/rho,lwd=2,col=3)       # hijo predice al padre
abline(0,1/rho,lwd=2,col=4)       # hijo predice al padre
abline(h=0);abline(v=0)          # ejesde referencia
library(manipulate)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
media<-mean(x)
meadia<-rep("mean",3)
meadia<-rep(media,3)
media<-mean(x)
meadia<-rep(media,4)
w(x-media)^2
w*(x-media)^2
sum(w*(x-media)^2)
media<-0.1471
sum(w*(x-media)^2)
media<-0.3
sum(w*(x-media)^2)
media<-1.077
sum(w*(x-media)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta1<-cor(y,x)* sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
rbind(c(beta0,beta1),coef(lm(y~x)))  # comparacion con la calculada manualmente y la del modelo
# invertiendo la variable predictor, donde la altura del hijo predice la altura del padre
beta1<-cor(y,x)* sd(x)/sd(y)
beta1
beta0
data(mcars)
data(mtcars)
str(mtcars)
datos<-mtcars$mpg
datos<-mtcars$wt
str(datos)
lm(I(mpg-mean(wt))~I(wt-mean(mpg))-1,data=data)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
<-meadia-mean(x)
<-meadia<-mean(x)
meadia<-mean(x)
(x-meadia)~2
(x-meadia)^2
sum((x-meadia)^2)
sum((x-0.8)^2)
sum((x-0.36)^2)
sum((x-0.44)^2)
library(kernlab)
library("kernlab", lib.loc="~/R/win-library/3.1")
data(spam)
str(spam[,1:5])
trainIndicator=rbinom(4601,size=1,prob=0.5)
trainIndicator<-rbinom(4601,size=1,prob=0.5)
trainIndicatocr=rbinom(4601,size=1,prob=0.5)
trainIndicator<-rbinom(4601,size=1,prob=0.5)
table(trainIndicatocr)
trainSpam<-spam[trainIndicator==1,]
testSpam<-spam[trainIndicatocr==0,]
names(trainSpam)
head(trainSpam)
table(trainSpam)
table(trainSpam$type)
plot(trainSpam$CapitalAve~trainSpam$type)
plot(trainSpam$capitalAve~trainSpam$type)
plot(log10(trainSpam$capitalAve+1)~trainSpam$type)
plot(log10(trainSpam[,1:5]+1))
hCluster<-hclust(dist(t(trainSpam[,5:7])))
plot(hCluster)
hCluster<-hclust(dist(t(trainSpam[,1:10])))
plot(hCluster)
hCluster<-hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
hClusterU<-hclust(dist(t(log10(trainSpam[,1:57]+1))))
plot(hClusterU)
trainSpam$numType<-as.numeric(trainSpam$type)-1
costFunction<-function(x,y) sum(x!=(y>0.5))
library(boot)
for(i in 1:55){
lmFormula<-reformulate(names(trainSpam)[i],response="numType")
glmFit<-glm(lmFormula,family="binomial",data=trainSpam)
cvError[i]<-cv.glm(trainSpam,glmFit,costFunction,2)$delta[2]
}
for(i in 1:55){
lmFormula<-reformulate(names(trainSpam)[i],response="numType")
glmFit<-glm(lmFormula,family="binomial",data=trainSpam)
cvError[i]=cv.glm(trainSpam,glmFit,costFunction,2)$delta[2]
}
cvError<-rep(NA,55)
for(i in 1:55){
lmFormula<-reformulate(names(trainSpam)[i],response="numType")
glmFit<-glm(lmFormula,family="binomial",data=trainSpam)
cvError[i]=cv.glm(trainSpam,glmFit,costFunction,2)$delta[2]
}
names(trainSpam)[which,min(cvError)]
for(i in 1:55){
lmFormula=reformulate(names(trainSpam)[i],response="numType")
glmFit=glm(lmFormula,family="binomial",data=trainSpam)
cvError[i]=cv.glm(trainSpam,glmFit,costFunction,2)$delta[2]
}
costFunction<-function(x,y) sum(x!=(y>0.5))
cvError<-rep(NA,55)
for(i in 1:55){
lmFormula=reformulate(names(trainSpam)[i],response="numType")
glmFit=glm(lmFormula,family="binomial",data=trainSpam)
cvError[i]=cv.glm(trainSpam,glmFit,costFunction,2)$delta[2]
}
library("knitr", lib.loc="~/R/win-library/3.1")
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
library("markdown", lib.loc="~/R/win-library/3.1")
library("rmarkdown", lib.loc="~/R/win-library/3.1")
library("knitr", lib.loc="~/R/win-library/3.1")
library("markdown", lib.loc="~/R/win-library/3.1")
library("rmarkdown", lib.loc="~/R/win-library/3.1")
install.packages(c("highr", "jsonlite", "knitr", "party", "rgl", "rmarkdown"))
library("rmarkdown", lib.loc="~/R/win-library/3.1")
library(datasets)
data(airquality)
summary(airquality)
install.packages("xtable")
install.packages("xtable")
install.packages("xtable")
plot(Ozone~Wind+Solar.R+Temp, data=airquality)
library("data.table", lib.loc="~/R/win-library/3.1")
data_waNA <- data[which(data$steps!= "NA"), ]
data <- read.csv("activity.csv")
setwd("C:/Users/Shippuden/Cursos/Curso-Getting and Cleaning Data")
data <- read.csv("activity.csv")
Data <- data[which(data$steps!= "NA"), ]
data <- read.csv("activity.csv")
Data <- data[which(data$steps!= "NA"), ]
data <- read.csv("activity.csv")
Data <- data[which(data$steps!= "NA"), ]
DataF <- aggregate(steps ~ date, Data = activity, sum)
data <- read.csv("activity.csv")
Data <- data[which(data$steps!= "NA"), ]
DataF <- aggregate(steps ~ date, data = Data, sum)
hist(DataF$steps)
hist(DataF$steps,main="Histogram of Steps",xlab="Steps")
SInterval<-aggregate(steps~interval,data=DataF,mean)
plot(steps~interval,data=SInterval,type="l")
View(Data)
View(DataF)
library("plyr", lib.loc="~/R/win-library/3.1")
View(data)
data$day<-ifelse(as.POSIXlt(as.Date(data$date))$wday%%6==0,"weekend","weekday")
data$day<-factor(data$day,levels=c("weekday","weeked"))
View(data)
str(data)
Data$day<-ifelse(as.POSIXlt(as.Date(Data$date))$wday%%6==0,"weekend","weekday")
Data$day<-factor(data$day,levels=c("weekday","weeked"))
View(data)
setwd("~/GitHub/Coursera/RepData_PeerAssessment1")
read.csv("activity.csv")
edar<-read.csv("activity.csv")
View(edar)
edar$day<-ifelse(as.POSIXlt(as.Date(edar$date))$wday%%6==0,"weekend","weekday")
data$day<-factor(data$day,levels=c("weekday","weeked"))
sInterval<-aggregate(steps~interval+day,data,mean)
library(lattice)
xyplot(steps~interval|factor(day),data=sInterval,aspect=1/2,type="l")
sInterval<-aggregate(steps~interval+day,data,mean)
library(lattice)
xyplot(steps~interval|factor(day),data=sInterval,aspect=1/2,type="l",layout = c(1, 2))
